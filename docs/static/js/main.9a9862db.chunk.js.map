{"version":3,"sources":["components/AddCategory.js","helpers/getGif.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","value","setValue","onSubmit","e","preventDefault","trim","length","categories","type","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","map","img","id","title","images","downsized_medium","GifGridItem","className","alt","src","GifGrid","console","log","loading","state","setState","useEffect","then","useFetchGifs","GifExpertApp","ReactDom","render","document","getElementById"],"mappings":"2MA+BeA,EA5BK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAClB,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAaA,OACA,sBAAMC,SAVe,SAACC,GAClBA,EAAEC,iBAEEJ,EAAMK,OAAOC,OAAS,IACtBR,GAAc,SAACS,GAAD,OAAiBP,GAAjB,mBAA2BO,OACzCN,EAAS,MAKjB,SACI,uBACIO,KAAK,OACLR,MAAOA,EACPS,SAhBkB,SAACN,GAAD,OAAOF,EAASE,EAAEO,OAAOV,a,+BCJ1CW,EAAO,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DACbC,EADa,uDAFP,mCAEO,cACsDC,UAAUH,GADhE,qBAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAHY,kBAIZA,EAAKC,KAAI,SAAAC,GAAQ,IAAD,EACnB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXT,IAAG,UAAEO,EAAIG,cAAN,aAAE,EAAYC,iBAAiBX,SARvB,2CAAH,sDCAPY,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOT,EAAU,EAAVA,IACrC,OACI,sBAAKa,UAAU,yCAAf,UACI,qBAAKC,IAAKL,EAAOM,IAAKf,IACtB,4BAAIS,QCFHO,EAAU,SAAC,GAAgB,IAAflB,EAAc,EAAdA,SACrB,ECFwB,SAACA,GACzBmB,QAAQC,IAAIpB,GAEZ,MAA0Bb,mBAAS,CAC/BoB,KAAM,GACNc,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAkBA,OAbAC,qBAAU,WACNzB,EAAQC,GAAUyB,MACd,SAAChB,GAAD,OACIc,EAAS,CACLhB,KAAME,EACNY,SAAS,SAItB,CAACrB,IAIGsB,EDnB2BI,CAAa1B,GAAjCY,EAAd,EAAQL,KAAcc,EAAtB,EAAsBA,QAEtB,OACI,qCACA,mCAAMrB,EAAN,OACEqB,GAAW,2CACb,qBAAKN,UAAU,WAAf,SAEYH,EAAOJ,KAAI,SAACC,GAAD,OACP,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEUtBiB,EArBM,WACjB,MAAoCxC,mBAAS,CAAC,gBAA9C,mBAAOQ,EAAP,KAAmBT,EAAnB,KAEA,OACI,qCACA,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAGA,6BAEQS,EAAWa,KACP,SAACR,GAAD,OAAe,cAAC,EAAD,CAASA,SAAUA,GAAeA,YCZrE4B,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.9a9862db.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({setCategories}) => {\n    const [value, setValue] = useState('');\n    \n    const handleInputChange = (e) => setValue(e.target.value)\n    \n    const handleSubmit = (e) => {\n        e.preventDefault();\n        \n        if (value.trim().length > 2) {\n            setCategories((categories) => [value, ...categories]);\n            setValue('');\n        }\n    }\n    \n    return (\n    <form onSubmit={handleSubmit}>        \n        <input \n            type=\"text\"\n            value={value}\n            onChange={ handleInputChange }\n        />\n    </form>\n)};\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\nexport default AddCategory;\n","const API_KEY = 'adWjSzzT0NRuUc0WQaiosvbKG9Xx13W4';\n\nexport const getGifs = async (category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=${API_KEY}&q=${encodeURI(category)}&limit=5`;\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n    return data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n}","import React from 'react'\n\nexport const GifGridItem = ({ id, title, url }) => {\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img alt={title} src={url}/>\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({category}) => {\n    const { data: images, loading } = useFetchGifs(category); \n    \n    return (\n        <>\n        <h3> {category} </h3>\n        { loading && <p>Loading...</p> }\n        <div className=\"cardGrid\">\n                {\n                    images.map((img) => (\n                        <GifGridItem \n                            key={img.id}\n                            {...img}\n                        />\n                    ))\n                }\n        </div>\n        </>\n    )\n}\n","import { useState, useEffect } from \"react\";\nimport { getGifs } from '../helpers/getGif';\n\nexport const useFetchGifs = (category) => {\n    console.log(category);\n    \n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n    \n    useEffect(() => {\n        getGifs(category).then(\n            (img) => \n                setState({\n                    data: img,\n                    loading: false\n            })\n        );   \n        \n    }, [category]);\n    \n\n    \n    return state;  \n}","import React, { useState } from 'react';\nimport AddCategory from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = () => {\n    const [categories, setCategories] = useState(['The Beatles'])\n    \n    return (\n        <>\n        <h2>GifExpertApp</h2>\n        <AddCategory setCategories={setCategories}/>\n        <hr/>\n        \n        \n        <ol>\n            {\n                categories.map(\n                    (category) => (<GifGrid category={category} key={category}/>)\n                )\n            }\n        </ol>\n        </>  \n    )\n}\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDom from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDom.render(\n    <GifExpertApp />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}